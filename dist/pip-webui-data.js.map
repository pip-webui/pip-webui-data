{"version":3,"sources":["data.js","cache/cache_announcement.js","cache/cache_feedback.js","cache/cache_guide.js","cache/cache_image_sets.js","cache/cache_tag.js","cache/cache_tip.js","data/data_announcement.js","data/data_avatar.js","data/data_config.js","data/data_document.js","data/data_feedback.js","data/data_guide.js","data/data_image_sets.js","data/data_party.js","data/data_pictures.js","data/data_session.js","data/data_settings.js","data/data_tag.js","data/data_tip.js","data/data_user.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACptlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzfile":"pip-webui-data.js","sourcesContent":["/**\r\n * @file Registration of WebUI data services\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('pipData', [\r\n        'pipDataConfig',\r\n        'pipDataDocument',\r\n        'pipDataAvatar',\r\n        'pipDataPicture',\r\n        'pipDataUser',\r\n        'pipDataParty',\r\n        'pipDataSession',\r\n\r\n        'pipDataUser',\r\n        'pipDataSettings',\r\n\r\n        'pipCacheTag',\r\n        'pipDataTag',\r\n\r\n        'pipCacheAnnouncement',\r\n        'pipDataAnnouncement',\r\n\r\n        'pipCacheFeedback',\r\n        'pipDataFeedback',\r\n\r\n        'pipCacheImageSet',\r\n        'pipDataImageSets',\r\n\r\n        'pipCacheGuide',\r\n        'pipDataGuide',\r\n\r\n        'pipCacheTip',\r\n        'pipDataTip',\r\n\r\n    ]);\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Announces data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheAnnouncement', ['pipDataAnnouncement']);\r\n\r\n    thisModule.service('pipCacheAnnouncement',\r\n        ['pipEnums', 'pipDataCache', 'pipCacheTag', function (pipEnums, pipDataCache, pipCacheTag) {\r\n\r\n            return {\r\n                readAnnounces: readAnnounces,\r\n                onAnnounceCreate: onAnnounceCreate,\r\n                onAnnounceUpdate: onAnnounceUpdate,\r\n                onAnnounceDelete: onAnnounceDelete                \r\n            };\r\n\r\n            function readAnnounces(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'announces';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            }\r\n            \r\n            function onAnnounceCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'announces', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            }\r\n\r\n            function onAnnounceUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'announces', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            }\r\n\r\n            function onAnnounceDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('announces', params, successCallback);\r\n            }\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Feedbacks data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheFeedback', ['pipDataFeedback']);\r\n\r\n    thisModule.service('pipCacheFeedback',\r\n        ['pipEnums', 'pipDataCache', 'pipCacheTag', function (pipEnums, pipDataCache, pipCacheTag) {\r\n\r\n            return {\r\n                readFeedbacks: readFeedbacks,\r\n                onFeedbackCreate: onFeedbackCreate,\r\n                onFeedbackUpdate: onFeedbackUpdate,\r\n                onFeedbackDelete: onFeedbackDelete                \r\n            };\r\n\r\n            function readFeedbacks(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'feedbacks';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onFeedbackCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'feedbacks', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onFeedbackUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'feedbacks', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onFeedbackDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('feedbacks', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Guides data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheGuide', ['pipDataGuide', 'pipCacheTag']);\r\n\r\n    thisModule.service('pipCacheGuide',\r\n        ['pipEnums', 'pipDataCache', 'pipCacheTag', function (pipEnums, pipDataCache, pipCacheTag) {\r\n\r\n            return {\r\n                readGuides: readGuides,\r\n                onGuideCreate: onGuideCreate,\r\n                onGuideUpdate: onGuideUpdate,\r\n                onGuideDelete: onGuideDelete                \r\n            };\r\n\r\n            function readGuides(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'guides';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onGuideCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'guides', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onGuideUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'guides', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onGuideDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('guides', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file ImageSets data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheImageSet', ['pipDataImageSets']);\r\n\r\n    thisModule.service('pipCacheImageSet',\r\n        ['pipEnums', 'pipDataCache', 'pipCacheTag', function (pipEnums, pipDataCache, pipCacheTag) {\r\n\r\n            return {\r\n                readImageSets: readImageSets,\r\n                onImageSetCreate: onImageSetCreate,\r\n                onImageSetUpdate: onImageSetUpdate,\r\n                onImageSetDelete: onImageSetDelete                \r\n            };\r\n\r\n            function readImageSets(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'image_sets';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onImageSetCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'image_sets', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onImageSetUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'image_sets', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onImageSetDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('image_sets', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Tags data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheTag', ['pipUtils', 'pipDataCache']);\r\n\r\n    thisModule.service('pipCacheTag',\r\n        ['pipTags', 'pipDataCache', function(pipTags, pipDataCache) {\r\n            return {\r\n                readTags: readTags,\r\n                // Todo: Add updateTags method\r\n                onTagsUpdate: onTagsUpdate,\r\n                tagsUpdateDecorator: tagsUpdateDecorator\r\n            };\r\n\t\t\t//------------------------------\r\n\r\n            function tagsUpdate(params, item) {\r\n                // Extract tag from updated entity\r\n                var tags = item ? pipTags.extractTags(item) : [];\r\n                if (tags.length == 0) return;\r\n\r\n                var cacheName = 'partyTags';\r\n                if (params && params.party_id !== null && params.party_id !== undefined)\r\n                    cacheName = cacheName + '_' + params.party_id;\r\n                else if (params && params.item && params.item.party_id !== null && params.item.party_id !== undefined)\r\n                    cacheName = cacheName + '_' + params.item.party_id;\r\n\r\n                // Todo: this is a wrong way to get party_id (contributor) from entities\r\n                var data = pipDataCache.retrieve(cacheName);\r\n\r\n                // If tags are stored\r\n                if (data) {\r\n                    _.each(tags, function(tag) {\r\n                        // Find if tag already exists\r\n                        var t = _.find(data.tags, function(t) {\r\n                            return pipTags.equalTags(t.tag, tag);\r\n                        });\r\n\r\n                        // Otherwise add a new tag\r\n                        if (t) {\r\n                            t.tag = tag;\r\n                            t.count = t.count + 1;\r\n                            t.used = new Date();\r\n                        } else {\r\n                            if (!data.tags)\r\n                                data.tags = [];\r\n\t\t\t\t\t\t\t\t\r\n                            data.tags.push({\r\n                                tag: tag,\r\n                                count: 1,\r\n                                used: new Date()\r\n                            });\r\n                        }\r\n                    });\r\n                    pipDataCache.store(cacheName, data);\r\n                }\r\n            };\r\n\r\n            function tagsUpdateDecorator(params, successCallback) {\r\n                return function(item) {\r\n                    tagsUpdate(params, item);\r\n\r\n                    if (successCallback) successCallback(item);\r\n                };\r\n            };\r\n\r\n\t\t\tfunction readTags(params, successCallback, errorCallback) {\r\n\t\t\t\tparams.resource = 'partyTags';\r\n\t\t\t\tparams.singleResult = true;\r\n\r\n\t\t\t\treturn pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n\t\t\t};\r\n\r\n\t\t\t// Todo: Add updateTags method\r\n\r\n\t\t\tfunction onTagsUpdate(params, successCallback) {\r\n\t\t\t\treturn tagsUpdateDecorator(params, successCallback);\r\n\t\t\t};\r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Tips data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipCacheTip', ['pipDataTip']);\r\n\r\n    thisModule.service('pipCacheTip',\r\n        ['pipEnums', 'pipDataCache', 'pipCacheTag', function (pipEnums, pipDataCache, pipCacheTag) {\r\n\r\n            return {\r\n                readTips: readTips,\r\n                onTipCreate: onTipCreate,\r\n                onTipUpdate: onTipUpdate,\r\n                onTipDelete: onTipDelete                \r\n            };\r\n\r\n            function readTips(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'tips';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onTipCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'tips', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onTipUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'tips', params,\r\n                    pipCacheTag.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onTipDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('tips', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Announces data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataAnnouncement', ['pipRest', 'pipDataModel', 'pipCacheAnnouncement']);\r\n\r\n    thisModule.provider('pipDataAnnouncement', function () {\r\n\r\n        // Read all announces\r\n        this.readAnnouncesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipEnums', function ($stateParams, pipRest, pipEnums) {\r\n                return pipRest.announces().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readCompletedAnnouncesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipEnums', function ($stateParams, pipRest, pipEnums) {\r\n                return pipRest.announces().query( {\r\n                        status: pipEnums.EXECUTION_STATUS.COMPLETED\r\n                    }\r\n                ).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readAnnounceResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.announces().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipCacheAnnouncement', function (pipRest, $stateParams, pipDataModel, pipCacheAnnouncement) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n                readAnnounces: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.item = params.item || {};\r\n                    params.item.search = $stateParams.search;\r\n                    params.item.tags = $stateParams.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    return pipCacheAnnouncement.readAnnounces(params, successCallback, errorCallback);\r\n                },\r\n\r\n                updateAnnounce: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipCacheAnnouncement.onAnnounceCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateAnnounceWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'announces';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipCacheAnnouncement.onAnnounceUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                createAnnounceWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'announces';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipCacheAnnouncement.onAnnounceCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n                \r\n                createAnnounce: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipCacheAnnouncement.onAnnounceCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                deleteAnnounce: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    pipDataModel.remove(params, pipCacheAnnouncement.onAnnounceDelete(params, successCallback), errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();","/**\r\n * @file PipData Avatar API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataAvatar', ['pipDataConfig', 'pipDataSession', 'angularFileUpload']);\r\n\r\n    thisModule.provider('pipDataAvatar', function () {\r\n\r\n        this.$get = ['$http', '$upload', 'pipDataConfig', 'pipDataSession', 'pipStrings', function ($http, $upload, pipDataConfig, pipDataSession, pipStrings) {\r\n\r\n            var\r\n                colorClasses = [\r\n                    'pip-avatar-color-0', 'pip-avatar-color-1', 'pip-avatar-color-2', 'pip-avatar-color-3',\r\n                    'pip-avatar-color-4', 'pip-avatar-color-5', 'pip-avatar-color-6', 'pip-avatar-color-7',\r\n                    'pip-avatar-color-8', 'pip-avatar-color-9', 'pip-avatar-color-10', 'pip-avatar-color-11',\r\n                    'pip-avatar-color-12', 'pip-avatar-color-13', 'pip-avatar-color-14', 'pip-avatar-color-15'\r\n                ],\r\n\r\n                colors = [\r\n                    'rgba(239,83,80,1)', 'rgba(236,64,122,1)', 'rgba(171,71,188,1)',\r\n                    'rgba(126,87,194,1)', 'rgba(92,107,192,1)', 'rgba(3,169,244,1)',\r\n                    'rgba(0,188,212,1)', 'rgba(0,150,136,1)', 'rgba(76,175,80,1)',\r\n                    'rgba(139,195,74,1)', 'rgba(205,220,57,1)', 'rgba(255,193,7,1)',\r\n                    'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(121,85,72,1)',\r\n                    'rgba(96,125,139,1)'\r\n                ],\r\n\r\n                entityTypes = {\r\n                    goal: 'goals',\r\n                    objective: 'goals',\r\n                    dream: 'goals',\r\n                    accomplishment: 'goals',\r\n                    area: 'areas',\r\n                    overall: 'visions',\r\n                    vision: 'visions',\r\n                    event: 'events',\r\n                    instance: 'events'\r\n                };\r\n\r\n            function fromServerFormat (avatar) {\r\n                    return avatar;\r\n                    // return {\r\n                    // id: avatar.id\r\n                    // name: avatar.name,\r\n                    // content_type: avatar.content_type,\r\n                    // length: avatar.length,\r\n                    // creator_id: avatar.creator_id,\r\n                    // created: avatar.created,\r\n                    // refs: avatar.refs,\r\n                    // url: avatar.url                  \r\n                    // }\r\n            }\r\n\r\n            function fromServerError(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n            }\r\n\r\n            function getUrl(params) {\r\n                var serverUrl = pipDataConfig.serverUrl(),\r\n                    url;\r\n                    \r\n                    if (params.type && params.id && params.partyId && (entityTypes[params.type] == 'goals' || entityTypes[params.type] == 'areas' )) {\r\n                        url = serverUrl + '/api/parties/' + params.partyId + '/' + entityTypes[params.type]\r\n                                + '/' + params.id + '/avatar';\r\n                    } else {\r\n                        url = serverUrl + '/api/parties/' + params.partyId + '/avatar';\r\n                    }\r\n\r\n                    return url;\r\n            }\r\n\r\n            return {\r\n                getEntityTypes: function getEntityTypes() {\r\n                    return entityTypes;\r\n                },\r\n\r\n                getColorClasses: function getColorClasses() {\r\n                    return colorClasses;\r\n                },\r\n\r\n                getAvatarColors: function getAvatarColors() {\r\n                    return colors;\r\n                },\r\n\r\n                getAvatarUrl: function(params) {\r\n                    var\r\n                        timestamp = Math.floor(new Date().getTime() / 1000) * 1000,\r\n                        colorClassIndex = pipStrings.hashCode(params.id) % colors.length,\r\n                        chr = null,\r\n                        url = null, \r\n                        default_template = '',\r\n\r\n                        noRedirect = params.noRedirect && params.noRedirect === true ? '&no_redirect=true' : '';\r\n\r\n                    if ((params.type && params.id && params.partyId) || (params.partyId)) {\r\n                        if (params.type && params.id && params.partyId) {\r\n                            if (params.type == 'category') return '';\r\n                            if (!params.noDefault) {\r\n                                default_template = 'default_template=' + params.type + '&bg=' + colors[colorClassIndex] + '&fg=white&';\r\n                            }\r\n                            if (entityTypes[params.type] == 'goals' || entityTypes[params.type] == 'areas' ) {\r\n                                url = getUrl(params) + '?' + default_template + 'timestamp=' + timestamp\r\n                                    + '&obj_id=' + params.id + noRedirect;\r\n                            }\r\n                        } else if (params.partyId && params.partyName) {\r\n                            colorClassIndex = pipStrings.hashCode(params.partyId) % colors.length;\r\n                            chr = (params.partyName[0] || '?').toUpperCase();\r\n                            if (!params.noDefault) {\r\n                                default_template = 'default_template=letter&bg=' + colors[colorClassIndex] + '&fg=white&chr=' + chr + '&';\r\n                            }\r\n                            url = getUrl(params) + '?' + default_template + 'timestamp=' + timestamp + '&obj_id=' + params.partyId + noRedirect;\r\n                        } else if (params.partyId && (!params.type && !params.id)) {\r\n                            url = getUrl(params) + '?timestamp=' + timestamp + '&obj_id=' + params.partyId + noRedirect;\r\n                        }\r\n                    }\r\n\r\n                    return url;                    \r\n                },\r\n\r\n                getAvatarPostUrl: function(params, filter) {\r\n                    var serverUrl = pipDataConfig.serverUrl(),\r\n                        FILE_URL;  \r\n\r\n                    if (params.entityType && params.id && params.partyId) {\r\n                        FILE_URL = serverUrl + '/api/parties/' + params.partyId + '/'\r\n                            + entityTypes[params.entityType] + '/' + params.id + '/avatar';\r\n                    } else {\r\n                        if (params.partyId && !params.entityType) {\r\n                            if (params.entityType || params.id)\r\n                                return '';\r\n                            FILE_URL = serverUrl + '/api/parties/' + params.partyId\r\n                                + '/avatar';\r\n                        }\r\n                    }\r\n\r\n                    return FILE_URL + '?name=' + filter;                    \r\n                },\r\n\r\n                deleteAvatar: function(params, successCallback, errorCallback) {\r\n                    $http({\r\n                        method: 'DELETE',\r\n                        url: getUrl(params)\r\n                    }).then(successCallback, function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                createAvatar: function(params, successCallback, errorCallback, progressCallback) {\r\n                    return $upload.http({\r\n                        url: this.getAvatarPostUrl(params.params, params.name),\r\n                        headers: { 'Content-Type': params.type },\r\n                        data: params.data\r\n                    }).then( \r\n                    function(data) {\r\n                        if(successCallback != null) {\r\n                            successCallback(fromServerFormat(data));\r\n                        }\r\n                    }, \r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    }, progressCallback);\r\n                },\r\n\r\n                createAvatarByUrl: function(url, successCallback, errorCallback) {\r\n                    return $http['post'](url)\r\n                         .success(function (data) {\r\n                            if(successCallback != null) {\r\n                                successCallback(fromServerFormat(data));\r\n                            }\r\n                         })\r\n                         .error(function (error) {\r\n                             errorCallback(fromServerError(error));\r\n                         });\r\n                }\r\n\r\n            };\r\n        }];\r\n    });\r\n})();\r\n","/**\r\n * @file PipData API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataConfig', ['pipRest']);\r\n\r\n    thisModule.provider('pipDataConfig', ['pipRestProvider', function (pipRestProvider) {\r\n\r\n        pipRestProvider.version('1.0');\r\n\r\n        this.version = function (newVersion) {\r\n            pipRestProvider.version(newVersion);\r\n        };\r\n\r\n        this.serverUrlFixed = function (value) {\r\n            pipRestProvider.serverUrlFixed(value);\r\n        };\r\n\r\n        this.serverUrl = function (newServerUrl) {\r\n            pipRestProvider.serverUrl(newServerUrl);\r\n        };\r\n\r\n        this.$get = ['$rootScope', '$http', '$resource', 'pipRest', function ($rootScope, $http, $resource, pipRest) {\r\n\r\n            return {\r\n\r\n                serverUrl: function (newServerUrl) {\r\n                    return pipRest.serverUrl(newServerUrl);\r\n                },\r\n\r\n                serverUrlFixed: function () {\r\n                    return pipRest.serverUrlFixed(serverUrlFixed);\r\n                },\r\n                \r\n                about: function(successCallback, errorCallback) {\r\n                    return pipRest.about().call({},\r\n                    // TODO: add mapping? \r\n                    successCallback, \r\n                    errorCallback);\r\n                },\r\n            };\r\n        }];\r\n    }]);\r\n})();\r\n","/**\r\n * @file PipData API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataDocument', ['pipDataConfig', 'pipDataSession', 'angularFileUpload']);\r\n\r\n    thisModule.provider('pipDataDocument', function () {\r\n\r\n        this.$get = ['$http', '$upload', 'pipDataConfig', 'pipDataSession', function ($http, $upload, pipDataConfig, pipDataSession) {\r\n\r\n            var fromServerFormat = function(document) {\r\n                    return document;\r\n                    // return {\r\n                    //     id: document.id,\r\n                    //     name: document.name,\r\n                    //     content_type: document.content_type,\r\n                    //     length: document.length,\r\n                    //     party_id: document.party_id,\r\n                    //     creator_id: document.creator_id,\r\n                    //     created: document.created,\r\n                    //     refs: document.refs,\r\n                    //     url: document.url\r\n                    // }\r\n            }, \r\n            fromServerError = function(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n            };\r\n\r\n            return {\r\n\r\n                getDocumentUrl: function(id) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files/' + id;\r\n                },\r\n\r\n                getDocumentPostUrl: function(filter) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files?name=' + filter;\r\n                },\r\n\r\n                getDocumentContentUrl: function(id) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files/' + id + '/content';\r\n                },\r\n\r\n                deleteDocument: function(id, successCallback, errorCallback) {\r\n                    $http({\r\n                        method: 'DELETE',\r\n                        url: getDocumentUrl(id)\r\n                    }).then(successCallback, function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                createDocument: function(params, successCallback, errorCallback, progressCallback) {\r\n                    return $upload.http({\r\n                        url: this.getDocumentPostUrl(params.name),\r\n                        headers: { 'Content-Type': params.type },\r\n                        data: params.data\r\n                    }).then( \r\n                    function(data) {\r\n                        if(successCallback != null) {\r\n                            successCallback(fromServerFormat(data));\r\n                        }\r\n                    }, \r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    }, progressCallback);\r\n                }\r\n            };\r\n        }];\r\n    });\r\n})();\r\n","/**\r\n * @file Feedbacks data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataFeedback', ['pipRest', 'pipDataModel', 'pipCacheFeedback']);\r\n\r\n    thisModule.provider('pipDataFeedback', function() {\r\n\r\n        this.readFeedbacksResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.feedbacks().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readFeedbackResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.feedbacks().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.$get = ['$stateParams', 'pipRest', 'pipDataModel', 'pipCacheFeedback', function($stateParams, pipRest, pipDataModel, pipCacheFeedback) {\r\n            return {\r\n\r\n                sendFeedback: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    pipDataModel.create(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readFeedbacks: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    \r\n                    return pipCacheFeedback.readFeedbacks(params, successCallback, errorCallback);\r\n                },\r\n\r\n\r\n                createFeedbackWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'feedbacks';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(params, successCallback, errorCallback);\r\n                    });\r\n                },\r\n\r\n                updateFeedback: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                deleteFeedback: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    pipDataModel.remove(params, successCallback, errorCallback);\r\n                }\r\n            };\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Guides data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataGuide', ['pipRest', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipDataGuide', function () {\r\n        var PAGE_SIZE = 5;\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipCacheGuide', function (pipRest, $stateParams, pipDataModel, pipCacheGuide) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n                readGuides: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.party_id = pipRest.partyId($stateParams);\r\n                    return pipCacheGuide.readGuides(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readIntroGuides: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.party_id = pipRest.partyId($stateParams);\r\n                    params.type = 'intro';\r\n                    params.status = 'completed';\r\n                    return pipCacheGuide.readGuides(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipCacheGuide.onGuideUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                createGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource =  'guides';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipCacheGuide.onGuideCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createGuideWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'guides';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipCacheGuide.onGuideCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                updateGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipCacheGuide.onGuideUpdate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateGuideWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'guides';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipCacheGuide.onGuideUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                \r\n                deleteGuide: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    pipDataModel.remove(params, pipCacheGuide.onGuideDelete(params, successCallback),  errorCallback);\r\n                }\r\n\r\n            }\r\n        }];\r\n    });\r\n\r\n})();","/**\r\n * @file Image sets data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n    \r\n    var thisModule = angular.module('pipDataImageSets', ['pipRest', 'pipDataModel', 'pipCacheImageSet']);\r\n\r\n    thisModule.provider('pipDataImageSets', function () {\r\n        var PAGE_SIZE = 15;\r\n\r\n        // Read all image sets\r\n        this.readImageSetsResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.image_sets().get({\r\n                    paging: 1,\r\n                    skip: 0,\r\n                    take: PAGE_SIZE,\r\n                    search: $stateParams.search,\r\n                    //tags: $stateParams.search\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readImageSetResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.image_sets().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipCacheImageSet', function (pipRest, $stateParams, pipDataModel, pipCacheImageSet) {\r\n\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n                readImageSets: function (params, transaction, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    \r\n                    params.item = params.item || {};\r\n                    params.item.skip = params.item.skip || 0;\r\n                    params.item.search = $stateParams.search || params.item.search;\r\n                   // params.item.tags = $stateParams.search || params.item.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.take = PAGE_SIZE;\r\n                    params.item.paging = 1;\r\n\r\n                    return pipDataModel.page(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                readImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipCacheImageSet.onImageSetUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                updateImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    return pipDataModel.update(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipCacheImageSet.onImageSetCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createImageSetWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'image_sets';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipCacheImageSet.onImageSetCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                updateImageSetWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'image_sets';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            successCallback,\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                deleteImageSet: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    pipDataModel.remove(params, successCallback, errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file PipData API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataParty', ['pipDataConfig', 'pipRest', 'pipDataSession']);\r\n\r\n    thisModule.provider('pipDataParty', function () {\r\n\r\n        this.readPartiesResolver = function () {\r\n            return /* @ngInject */ ['$rootScope', '$stateParams', 'pipRest', 'pipDataSession', function ($rootScope, $stateParams, pipRest, pipDataSession) {\r\n                            var userId = pipDataSession.userId();\r\n                            var partyId = $stateParams.party_id || userId;\r\n\r\n                            if (partyId != userId)\r\n                                throw('ERROR_NOT_ALLOWED');\r\n                            return pipRest.parties().get({ id: partyId }).$promise;\r\n                        }]\r\n        }\r\n\r\n        this.$get = ['pipRest', 'pipDataConfig', function (pipRest, pipDataConfig) {\r\n\r\n           var fromServerFormat = function(party) {\r\n                    return party;\r\n                    // return {\r\n                    //     name: party.name,\r\n                    //     email: party.email,\r\n                    //     type: party.type,\r\n                    //     join: party.join,\r\n                    //     updated: party.updated,\r\n                    //     id: party.id\r\n                    // }\r\n                },\r\n\r\n                toServerFormat = function(party) {\r\n                    return party;\r\n                    // return {\r\n                    //     name: party.name,\r\n                    //     email: party.email,\r\n                    //     type: party.type,\r\n                    //     join: party.join,\r\n                    //     updated: party.updated,\r\n                    //     id: party.id\r\n                    // }                    \r\n                },\r\n\r\n                fromServerError = function(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n                };\r\n\r\n            return {\r\n                readParty: function(id) {\r\n                    params.resource = 'parties';\r\n                    params.item = params.item || {};\r\n                    params.item.id = pipRest.partyId($stateParams);\r\n                    return pipDataModel.readOne(params, successCallback, errorCallback);\r\n                },\r\n\r\n                createParty: function(data, successCallback, errorCallback) {\r\n                    pipRest.parties().update(\r\n                        toServerFormat(data),\r\n                        function(party) {\r\n                            successCallback(fromServerFormat(party));\r\n                        }, errorCallback);\r\n                },\r\n\r\n                updateParty: function(data, successCallback, errorCallback) {\r\n                    pipRest.parties().update(\r\n                        toServerFormat(data),\r\n                        function(party) {\r\n                            successCallback(fromServerFormat(party));\r\n                        }, function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        });\r\n                },                \r\n\r\n                partySettings: function () {\r\n                    return pipRest.partySettings();\r\n                }\r\n            };\r\n        }];\r\n    });\r\n})();","/**\r\n * @file PipData Pictures API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataPicture', ['pipDataConfig', 'pipDataSession', 'angularFileUpload']);\r\n\r\n    thisModule.provider('pipDataPicture', function () {\r\n\r\n        this.$get = ['$http', '$upload', 'pipDataConfig', 'pipDataSession', function ($http, $upload, pipDataConfig, pipDataSession) {\r\n\r\n            var fromServerFormat = function(picture) {\r\n                    return picture;\r\n                    // return {\r\n                    //     id: picture.id,\r\n                    //     name: picture.name,\r\n                    //     content_type: picture.content_type,\r\n                    //     length: picture.length,\r\n                    //     party_id: picture.party_id,\r\n                    //     creator_id: picture.creator_id,\r\n                    //     created: picture.created,\r\n                    //     refs: picture.refs,\r\n                    //     url: picture.url\r\n                    // }\r\n            }, \r\n            fromServerError = function(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n            };\r\n\r\n            return {\r\n\r\n                getPictureUrl: getPictureUrl,\r\n                getPicturePostUrl: getPicturePostUrl,\r\n                getPictureContentUrl: getPictureContentUrl,\r\n                deletePicture: deletePicture,\r\n                createPicture: createPicture,\r\n                createPictureByUrl: createPictureByUrl\r\n\r\n            }\r\n\r\n                function getPictureUrl(id) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files/' + id;\r\n                }\r\n\r\n                function getPicturePostUrl(filter) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files?name=' + filter;\r\n                }\r\n\r\n                function getPictureContentUrl(id) {\r\n                    var userId = pipDataSession.userId(),\r\n                        partyId = pipDataSession.partyId() || userId\r\n\r\n                    return pipDataConfig.serverUrl() + '/api/parties/' + partyId + '/files/' + id + '/content';\r\n                }\r\n\r\n                function deletePicture(id, successCallback, errorCallback) {\r\n                    $http({\r\n                        method: 'DELETE',\r\n                        url: getPictureUrl(id)\r\n                    }).then(successCallback, function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                }\r\n\r\n                function createPicture(params, successCallback, errorCallback, progressCallback) {\r\n                    return $upload.http({\r\n                        url: getPicturePostUrl(params.name),\r\n                        headers: { 'Content-Type': params.type },\r\n                        data: params.data\r\n                    }).then( \r\n                    function(data) {\r\n                        if(successCallback != null) {\r\n                            successCallback(fromServerFormat(data));\r\n                        }\r\n                    }, \r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    }, progressCallback);\r\n                }\r\n\r\n                function createPictureByUrl(url, successCallback, errorCallback) {\r\n                    return $http['post'](url)\r\n                         .success(function (data) {\r\n                            if(successCallback != null) {\r\n                                successCallback(fromServerFormat(data));\r\n                            }\r\n                         })\r\n                         .error(function (error) {\r\n                             errorCallback(fromServerError(error));\r\n                         });\r\n                }\r\n\r\n        }];\r\n    });\r\n})();\r\n","/**\r\n * @file PipData API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataSession', ['pipDataConfig', 'pipRest', 'pipRest.Session']);\r\n\r\n    thisModule.provider('pipDataSession', function () {\r\n\r\n\r\n        this.readSessionsResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.userSessions().query({\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n            }];                \r\n\r\n        this.readSessionIdResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.sessionId();\r\n            }];\r\n                  \r\n        this.$get = ['pipRest', 'pipSession', 'pipDataConfig', '$stateParams', function (pipRest, pipSession, pipDataConfig, $stateParams) {\r\n\r\n                var fromServerUserFormat = function(user) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return user;\r\n                },\r\n\r\n                toServerUserFormat = function(user) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return user;\r\n                },\r\n\r\n                fromServerError = function(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n                }; \r\n          \r\n            return {\r\n\r\n                signin: function (params, successCallback, errorCallback) {\r\n                    return pipSession.signin(\r\n                        {\r\n                            serverUrl: params.serverUrl,\r\n                            email: params.email,\r\n                            password: params.password,\r\n                            remember: params.remember,\r\n                            adminOnly: !!params.adminOnly,                            \r\n                        },\r\n                        function(user) {\r\n                            successCallback(fromServerUserFormat(user));\r\n                        },\r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        }                        \r\n                    );\r\n                },\r\n\r\n                open: function (params) {\r\n                    return pipSession.open(params.serverUrl, params.user, params.password, params.remember);\r\n                },                \r\n\r\n                signout: function () {\r\n                    return pipRest.signout();\r\n                },\r\n                \r\n                userSessions: function () {\r\n                    return pipRest.userSessions();\r\n                },\r\n                \r\n                userId: function () {\r\n                    return pipRest.userId();\r\n                },\r\n\r\n                sessionId: function () {\r\n                    return pipRest.sessionId();\r\n                },\r\n                \r\n                partyId: function () {\r\n                    return pipRest.partyId($stateParams);\r\n                },  \r\n\r\n                // add from user_settings_data\r\n                removeSession: function (params, successCallback, errorCallback) {\r\n                    pipRest.userSessions().remove(\r\n                        {\r\n                            id: params.session.id,\r\n                            party_id: pipRest.partyId($stateParams)\r\n                        },\r\n                        successCallback,\r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        } \r\n                    );\r\n                },\r\n\r\n            };\r\n        }];\r\n    });\r\n})();","/**\r\n * @file Settings data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n * @todo Rewrite, use cached settings, remove unrelated methods\r\n */\r\n\r\n/* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataSettings', ['pipRest', 'pipSessionData', 'pipSessionCache', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipDataSettings', ['pipSessionDataProvider', function (pipSessionDataProvider) {\r\n\r\n        this.readSettingsResolver = pipSessionDataProvider.readSettingsResolver;\r\n\r\n        this.$get = ['$rootScope', '$stateParams', 'pipRest', 'pipSessionCache', 'pipSession', 'pipDataModel', function ($rootScope, $stateParams, pipRest, pipSessionCache, pipSession, pipDataModel) {\r\n            return {\r\n                // Saving generic settings\r\n                saveSettings: saveSettings,\r\n                readSettings: readSettings,\r\n                reReadSettings: reReadSettings\r\n\r\n            };\r\n\r\n            function readSettings(successCallback, errorCallback) {\r\n                return pipSessionCache.readSettings(successCallback, errorCallback)\r\n            };\r\n\r\n            // force read settings from server and update cache\r\n            function reReadSettings(successCallback, errorCallback) {\r\n                return pipRest.partySettings().get(\r\n                    {\r\n                        party_id: pipSession.userId()\r\n                    },\r\n                    function (settings) {\r\n                        settings = settings || {};\r\n                        pipSessionCache.onSettingsUpdate(settings);\r\n                        if (successCallback) successCallback(settings);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function saveSettings(settings, keys, successCallback, errorCallback) {\r\n                // Extract specific keys\r\n                settings = keys ? _.pick(settings, keys) : settings;\r\n                settings.party_id = pipSession.userId();\r\n                var oldSettings = _.cloneDeep($rootScope.$settings);\r\n                pipSessionCache.onSettingsUpdate(settings);\r\n\r\n                var params = {};\r\n                params.resource = 'partySettings';\r\n                params.item = settings;\r\n                params.item.creator_id = pipSession.userId();\r\n\r\n                pipDataModel.create(\r\n                    params,\r\n                    successCallback,\r\n                    function (error) {\r\n                        pipSessionCache.onSettingsUpdate(oldSettings);\r\n\r\n                        if (errorCallback) errorCallback(error);\r\n                    }\r\n                );\r\n            };\r\n        }];\r\n    }]);\r\n\r\n})();\r\n","/**\r\n * @file Tags data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataTag', ['pipRest' , 'pipDataModel', 'pipCacheTag']);\r\n\r\n    thisModule.provider('pipDataTag', function() {\r\n        \r\n        this.readTagsResolver = function() {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipCacheTag', function($stateParams, pipRest, pipCacheTag) {\r\n                return pipCacheTag.readTags({\r\n                    item: { party_id: pipRest.partyId($stateParams) }\r\n                });\r\n            }];\r\n        };\r\n\r\n        this.$get = ['$stateParams', '$state', 'pipRest', 'pipDataModel', 'pipCacheTag', function($stateParams, $state, pipRest, pipDataModel, pipCacheTag) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n                \r\n                readTags: function(params, successCallback, errorCallback) {\r\n                    params = params || {};\r\n                    params.item = params.item || {};\r\n                    if(params.item.party_id == null) {\r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                    }\r\n                    return pipCacheTag.readTags(params, successCallback, errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Tips data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataTip', ['pipRest', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipDataTip', function () {\r\n        var PAGE_SIZE = 100;\r\n\r\n        // Read all tips\r\n        this.readTipsResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.tips().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readTipResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.tips().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipCacheTip', function (pipRest, $stateParams, pipDataModel, pipCacheTip) {\r\n\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n// todo update after optimization rezolver\r\n                readTips: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.search = $stateParams.search;\r\n                    params.item.tags = $stateParams.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    return pipCacheTip.readTips(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipCacheTip.onTipsUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                createTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipCacheTip.onTipCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                createTipWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'tips';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        \r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipCacheTip.onTipCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    }, errorCallback);\r\n                },\r\n\r\n                updateTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipCacheTip.onTipUpdate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateTipWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'tips';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        \r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipCacheTip.onTipUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                deleteTip: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    pipDataModel.remove(params, pipCacheTip.onTipDelete(params, successCallback), errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file PipData API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataUser', ['pipDataConfig', 'pipRest']);\r\n\r\n    thisModule.provider('pipDataUser', function () {\r\n\r\n        this.$get = ['pipRest', 'pipDataConfig', '$stateParams', 'pipDataModel', function (pipRest, pipDataConfig, $stateParams, pipDataModel) {\r\n\r\n            var fromServerFormat = function(user) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return user;\r\n                },                \r\n\r\n                toServerFormat = function(user) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return {\r\n                        name: user.name,\r\n                        email: user.email,\r\n                        password: user.password,\r\n                        language: user.language,\r\n                        theme: user.theme\r\n                    }\r\n                },                    \r\n\r\n                fromServerError = function(error) {\r\n                    // TODO: add mapping for demonstration of fields\r\n                    return error;\r\n                };\r\n\r\n        this.readUsersResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.users().page({\r\n                    party_id: $stateParams.id,\r\n                    paging: $stateParams.paging || 1,\r\n                    skip: $stateParams.skip || 0,\r\n                    take: $stateParams.take || 15\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readUserResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.users().get({\r\n                    id: $stateParams.id,\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n\r\n            }];\r\n        };\r\n\r\n        this.readActivitiesUserResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', '$rootScope', function ($stateParams, pipRest, $rootScope) {\r\n                return pipRest.partyActivities().page({\r\n                    party_id: $rootScope.$user.id,\r\n                    paging: 1,\r\n                    skip: 0,\r\n                    take: 25\r\n                }).$promise;\r\n            }];                \r\n\r\n\r\n            return {\r\n\r\n                signup: function (params, successCallback, errorCallback) {\r\n                    return pipRest.signup(params.serverUrl).call(toServerFormat(params), \r\n                    function(user) {\r\n                        successCallback(fromServerFormat(user));\r\n                    },\r\n                    function(error) {\r\n                        fromServerError(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                recoverPassword: function (params, successCallback, errorCallback) {\r\n                    return pipRest.recoverPassword(params.serverUrl).call({\r\n                        email: params.email\r\n                    }, successCallback,\r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                resetPassword: function (params, successCallback, errorCallback) {\r\n                    return pipRest.resetPassword(params.serverUrl).call({\r\n                        email: params.email,\r\n                        code: params.code,\r\n                        password: params.password\r\n                    }, successCallback,\r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                changePassword: function (params, successCallback, errorCallback) {\r\n                    // TODO\r\n                    return pipRest.changePassword().call(\r\n                    params,\r\n                    successCallback,\r\n                    function(error) {\r\n                        errorCallback(fromServerError(error));\r\n                    });\r\n                },\r\n\r\n                requestEmailVerification: function (params, successCallback, errorCallback) {\r\n                    return pipRest.requestEmailVerification(params.serverUrl).get(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams),\r\n                            email: params.email\r\n                        },\r\n                        successCallback, \r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        }\r\n                    );      \r\n                },\r\n\r\n                verifyEmail: function (params, successCallback, errorCallback) {\r\n                    return pipRest.verifyEmail(params.serverUrl).call(\r\n                        {\r\n                            email: params.email,\r\n                            code: params.code\r\n                        }, \r\n                        successCallback,\r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        }\r\n                    );\r\n                },\r\n\r\n                signupValidate: function (params, successCallback, errorCallback) {\r\n                    return pipRest.signupValidate().call({\r\n                        email: params.email}, successCallback, errorCallback);\r\n                },\r\n\r\n                currentUser: function (successCallback, errorCallback) {\r\n                    return pipRest.currentUser().call({},\r\n                        function(user) {\r\n                            successCallback(fromServerFormat(user));\r\n                        },\r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        }\r\n                    );\r\n                },\r\n\r\n                readUsers: function (params, transaction, successCallback, errorCallback) {\r\n                    return pipRest.users().page(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams),\r\n                            paging: 1,\r\n                            skip: params.start || params.item.skip || 0,\r\n                            search: params.item.search ,\r\n                            active: params.item.active,\r\n                            paid: params.item.paid,\r\n                            admin: params.item.admin,\r\n                            take: 15\r\n                        },\r\n                        function (pagedUsers) {\r\n                            if (successCallback) successCallback(pagedUsers);\r\n                        },\r\n                        function (error) {\r\n                            errorCallback(error);\r\n                        }\r\n                    );\r\n                },\r\n\r\n                readUser: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'users';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, successCallback, errorCallback);\r\n                },\r\n                \r\n                updateUser: function (params, successCallback, errorCallback) {\r\n                    pipRest.users().update(\r\n                        params.item,\r\n                        function(user) {\r\n                            successCallback(fromServerFormat(user));\r\n                        },\r\n                        function(error) {\r\n                            errorCallback(fromServerError(error));\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }];\r\n    });\r\n})();\r\n"],"sourceRoot":"/source/"}